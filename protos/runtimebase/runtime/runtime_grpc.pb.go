// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: runtime.proto

package runtime

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RuntimeService_GetObjects_FullMethodName       = "/App.Runtime.RuntimeService/GetObjects"
	RuntimeService_GetObject_FullMethodName        = "/App.Runtime.RuntimeService/GetObject"
	RuntimeService_GetTreeMapRoot_FullMethodName   = "/App.Runtime.RuntimeService/GetTreeMapRoot"
	RuntimeService_GetPalletTree_FullMethodName    = "/App.Runtime.RuntimeService/GetPalletTree"
	RuntimeService_ObjectsDeploy_FullMethodName    = "/App.Runtime.RuntimeService/ObjectsDeploy"
	RuntimeService_Ping_FullMethodName             = "/App.Runtime.RuntimeService/Ping"
	RuntimeService_ObjectCommand_FullMethodName    = "/App.Runtime.RuntimeService/ObjectCommand"
	RuntimeService_GetObjectsValues_FullMethodName = "/App.Runtime.RuntimeService/GetObjectsValues"
	RuntimeService_GetObjectValues_FullMethodName  = "/App.Runtime.RuntimeService/GetObjectValues"
	RuntimeService_GetPortValue_FullMethodName     = "/App.Runtime.RuntimeService/GetPortValue"
	RuntimeService_RegisterPlugin_FullMethodName   = "/App.Runtime.RuntimeService/RegisterPlugin"
	RuntimeService_DeregisterPlugin_FullMethodName = "/App.Runtime.RuntimeService/DeregisterPlugin"
	RuntimeService_ListPlugins_FullMethodName      = "/App.Runtime.RuntimeService/ListPlugins"
	RuntimeService_GetPlugins_FullMethodName       = "/App.Runtime.RuntimeService/GetPlugins"
)

// RuntimeServiceClient is the client API for RuntimeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RuntimeServiceClient interface {
	GetObjects(ctx context.Context, in *ObjectsRequest, opts ...grpc.CallOption) (*ObjectsResponse, error)
	GetObject(ctx context.Context, in *ObjectRequest, opts ...grpc.CallOption) (*ObjectConfig, error)
	GetTreeMapRoot(ctx context.Context, in *ObjectsRequest, opts ...grpc.CallOption) (*ObjectsRootMap, error)
	GetPalletTree(ctx context.Context, in *PalletRequest, opts ...grpc.CallOption) (*PalletTree, error)
	ObjectsDeploy(ctx context.Context, in *ObjectDeploy, opts ...grpc.CallOption) (*ObjectDeploy, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	ObjectCommand(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CommandResponse, error)
	GetObjectsValues(ctx context.Context, in *ObjectsValuesRequest, opts ...grpc.CallOption) (*GetObjectsValuesResponse, error)
	// all port values for an object
	GetObjectValues(ctx context.Context, in *ObjectsValueRequest, opts ...grpc.CallOption) (*GetObjectValuesResponse, error)
	// single port value for an object
	GetPortValue(ctx context.Context, in *PortRequest, opts ...grpc.CallOption) (*PortValue, error)
	RegisterPlugin(ctx context.Context, in *PluginInfo, opts ...grpc.CallOption) (*PluginResponse, error)
	DeregisterPlugin(ctx context.Context, in *PluginInfo, opts ...grpc.CallOption) (*PluginResponse, error)
	ListPlugins(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PluginList, error)
	GetPlugins(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PluginList, error)
}

type runtimeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRuntimeServiceClient(cc grpc.ClientConnInterface) RuntimeServiceClient {
	return &runtimeServiceClient{cc}
}

func (c *runtimeServiceClient) GetObjects(ctx context.Context, in *ObjectsRequest, opts ...grpc.CallOption) (*ObjectsResponse, error) {
	out := new(ObjectsResponse)
	err := c.cc.Invoke(ctx, RuntimeService_GetObjects_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) GetObject(ctx context.Context, in *ObjectRequest, opts ...grpc.CallOption) (*ObjectConfig, error) {
	out := new(ObjectConfig)
	err := c.cc.Invoke(ctx, RuntimeService_GetObject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) GetTreeMapRoot(ctx context.Context, in *ObjectsRequest, opts ...grpc.CallOption) (*ObjectsRootMap, error) {
	out := new(ObjectsRootMap)
	err := c.cc.Invoke(ctx, RuntimeService_GetTreeMapRoot_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) GetPalletTree(ctx context.Context, in *PalletRequest, opts ...grpc.CallOption) (*PalletTree, error) {
	out := new(PalletTree)
	err := c.cc.Invoke(ctx, RuntimeService_GetPalletTree_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) ObjectsDeploy(ctx context.Context, in *ObjectDeploy, opts ...grpc.CallOption) (*ObjectDeploy, error) {
	out := new(ObjectDeploy)
	err := c.cc.Invoke(ctx, RuntimeService_ObjectsDeploy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, RuntimeService_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) ObjectCommand(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CommandResponse, error) {
	out := new(CommandResponse)
	err := c.cc.Invoke(ctx, RuntimeService_ObjectCommand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) GetObjectsValues(ctx context.Context, in *ObjectsValuesRequest, opts ...grpc.CallOption) (*GetObjectsValuesResponse, error) {
	out := new(GetObjectsValuesResponse)
	err := c.cc.Invoke(ctx, RuntimeService_GetObjectsValues_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) GetObjectValues(ctx context.Context, in *ObjectsValueRequest, opts ...grpc.CallOption) (*GetObjectValuesResponse, error) {
	out := new(GetObjectValuesResponse)
	err := c.cc.Invoke(ctx, RuntimeService_GetObjectValues_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) GetPortValue(ctx context.Context, in *PortRequest, opts ...grpc.CallOption) (*PortValue, error) {
	out := new(PortValue)
	err := c.cc.Invoke(ctx, RuntimeService_GetPortValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) RegisterPlugin(ctx context.Context, in *PluginInfo, opts ...grpc.CallOption) (*PluginResponse, error) {
	out := new(PluginResponse)
	err := c.cc.Invoke(ctx, RuntimeService_RegisterPlugin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) DeregisterPlugin(ctx context.Context, in *PluginInfo, opts ...grpc.CallOption) (*PluginResponse, error) {
	out := new(PluginResponse)
	err := c.cc.Invoke(ctx, RuntimeService_DeregisterPlugin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) ListPlugins(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PluginList, error) {
	out := new(PluginList)
	err := c.cc.Invoke(ctx, RuntimeService_ListPlugins_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) GetPlugins(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PluginList, error) {
	out := new(PluginList)
	err := c.cc.Invoke(ctx, RuntimeService_GetPlugins_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RuntimeServiceServer is the server API for RuntimeService service.
// All implementations must embed UnimplementedRuntimeServiceServer
// for forward compatibility
type RuntimeServiceServer interface {
	GetObjects(context.Context, *ObjectsRequest) (*ObjectsResponse, error)
	GetObject(context.Context, *ObjectRequest) (*ObjectConfig, error)
	GetTreeMapRoot(context.Context, *ObjectsRequest) (*ObjectsRootMap, error)
	GetPalletTree(context.Context, *PalletRequest) (*PalletTree, error)
	ObjectsDeploy(context.Context, *ObjectDeploy) (*ObjectDeploy, error)
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	ObjectCommand(context.Context, *Command) (*CommandResponse, error)
	GetObjectsValues(context.Context, *ObjectsValuesRequest) (*GetObjectsValuesResponse, error)
	// all port values for an object
	GetObjectValues(context.Context, *ObjectsValueRequest) (*GetObjectValuesResponse, error)
	// single port value for an object
	GetPortValue(context.Context, *PortRequest) (*PortValue, error)
	RegisterPlugin(context.Context, *PluginInfo) (*PluginResponse, error)
	DeregisterPlugin(context.Context, *PluginInfo) (*PluginResponse, error)
	ListPlugins(context.Context, *Empty) (*PluginList, error)
	GetPlugins(context.Context, *Empty) (*PluginList, error)
	mustEmbedUnimplementedRuntimeServiceServer()
}

// UnimplementedRuntimeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRuntimeServiceServer struct {
}

func (UnimplementedRuntimeServiceServer) GetObjects(context.Context, *ObjectsRequest) (*ObjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjects not implemented")
}
func (UnimplementedRuntimeServiceServer) GetObject(context.Context, *ObjectRequest) (*ObjectConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObject not implemented")
}
func (UnimplementedRuntimeServiceServer) GetTreeMapRoot(context.Context, *ObjectsRequest) (*ObjectsRootMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTreeMapRoot not implemented")
}
func (UnimplementedRuntimeServiceServer) GetPalletTree(context.Context, *PalletRequest) (*PalletTree, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPalletTree not implemented")
}
func (UnimplementedRuntimeServiceServer) ObjectsDeploy(context.Context, *ObjectDeploy) (*ObjectDeploy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObjectsDeploy not implemented")
}
func (UnimplementedRuntimeServiceServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedRuntimeServiceServer) ObjectCommand(context.Context, *Command) (*CommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObjectCommand not implemented")
}
func (UnimplementedRuntimeServiceServer) GetObjectsValues(context.Context, *ObjectsValuesRequest) (*GetObjectsValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectsValues not implemented")
}
func (UnimplementedRuntimeServiceServer) GetObjectValues(context.Context, *ObjectsValueRequest) (*GetObjectValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectValues not implemented")
}
func (UnimplementedRuntimeServiceServer) GetPortValue(context.Context, *PortRequest) (*PortValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPortValue not implemented")
}
func (UnimplementedRuntimeServiceServer) RegisterPlugin(context.Context, *PluginInfo) (*PluginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterPlugin not implemented")
}
func (UnimplementedRuntimeServiceServer) DeregisterPlugin(context.Context, *PluginInfo) (*PluginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeregisterPlugin not implemented")
}
func (UnimplementedRuntimeServiceServer) ListPlugins(context.Context, *Empty) (*PluginList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPlugins not implemented")
}
func (UnimplementedRuntimeServiceServer) GetPlugins(context.Context, *Empty) (*PluginList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlugins not implemented")
}
func (UnimplementedRuntimeServiceServer) mustEmbedUnimplementedRuntimeServiceServer() {}

// UnsafeRuntimeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RuntimeServiceServer will
// result in compilation errors.
type UnsafeRuntimeServiceServer interface {
	mustEmbedUnimplementedRuntimeServiceServer()
}

func RegisterRuntimeServiceServer(s grpc.ServiceRegistrar, srv RuntimeServiceServer) {
	s.RegisterService(&RuntimeService_ServiceDesc, srv)
}

func _RuntimeService_GetObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).GetObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_GetObjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).GetObjects(ctx, req.(*ObjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_GetObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).GetObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_GetObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).GetObject(ctx, req.(*ObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_GetTreeMapRoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).GetTreeMapRoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_GetTreeMapRoot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).GetTreeMapRoot(ctx, req.(*ObjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_GetPalletTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).GetPalletTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_GetPalletTree_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).GetPalletTree(ctx, req.(*PalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_ObjectsDeploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectDeploy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).ObjectsDeploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_ObjectsDeploy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).ObjectsDeploy(ctx, req.(*ObjectDeploy))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_ObjectCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).ObjectCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_ObjectCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).ObjectCommand(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_GetObjectsValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectsValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).GetObjectsValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_GetObjectsValues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).GetObjectsValues(ctx, req.(*ObjectsValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_GetObjectValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectsValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).GetObjectValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_GetObjectValues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).GetObjectValues(ctx, req.(*ObjectsValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_GetPortValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).GetPortValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_GetPortValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).GetPortValue(ctx, req.(*PortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_RegisterPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PluginInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).RegisterPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_RegisterPlugin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).RegisterPlugin(ctx, req.(*PluginInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_DeregisterPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PluginInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).DeregisterPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_DeregisterPlugin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).DeregisterPlugin(ctx, req.(*PluginInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_ListPlugins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).ListPlugins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_ListPlugins_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).ListPlugins(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_GetPlugins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).GetPlugins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_GetPlugins_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).GetPlugins(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// RuntimeService_ServiceDesc is the grpc.ServiceDesc for RuntimeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RuntimeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "App.Runtime.RuntimeService",
	HandlerType: (*RuntimeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetObjects",
			Handler:    _RuntimeService_GetObjects_Handler,
		},
		{
			MethodName: "GetObject",
			Handler:    _RuntimeService_GetObject_Handler,
		},
		{
			MethodName: "GetTreeMapRoot",
			Handler:    _RuntimeService_GetTreeMapRoot_Handler,
		},
		{
			MethodName: "GetPalletTree",
			Handler:    _RuntimeService_GetPalletTree_Handler,
		},
		{
			MethodName: "ObjectsDeploy",
			Handler:    _RuntimeService_ObjectsDeploy_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _RuntimeService_Ping_Handler,
		},
		{
			MethodName: "ObjectCommand",
			Handler:    _RuntimeService_ObjectCommand_Handler,
		},
		{
			MethodName: "GetObjectsValues",
			Handler:    _RuntimeService_GetObjectsValues_Handler,
		},
		{
			MethodName: "GetObjectValues",
			Handler:    _RuntimeService_GetObjectValues_Handler,
		},
		{
			MethodName: "GetPortValue",
			Handler:    _RuntimeService_GetPortValue_Handler,
		},
		{
			MethodName: "RegisterPlugin",
			Handler:    _RuntimeService_RegisterPlugin_Handler,
		},
		{
			MethodName: "DeregisterPlugin",
			Handler:    _RuntimeService_DeregisterPlugin_Handler,
		},
		{
			MethodName: "ListPlugins",
			Handler:    _RuntimeService_ListPlugins_Handler,
		},
		{
			MethodName: "GetPlugins",
			Handler:    _RuntimeService_GetPlugins_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "runtime.proto",
}
