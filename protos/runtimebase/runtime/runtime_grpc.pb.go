// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: runtime.proto

package runtime

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RuntimeService_GetObjects_FullMethodName             = "/App.Runtime.RuntimeService/GetObjects"
	RuntimeService_GetObjectsRoot_FullMethodName         = "/App.Runtime.RuntimeService/GetObjectsRoot"
	RuntimeService_GetObjectChilds_FullMethodName        = "/App.Runtime.RuntimeService/GetObjectChilds"
	RuntimeService_GetObjectParentsChilds_FullMethodName = "/App.Runtime.RuntimeService/GetObjectParentsChilds"
	RuntimeService_GetObject_FullMethodName              = "/App.Runtime.RuntimeService/GetObject"
	RuntimeService_GetObjectHelp_FullMethodName          = "/App.Runtime.RuntimeService/GetObjectHelp"
	RuntimeService_GetTreeMapRoot_FullMethodName         = "/App.Runtime.RuntimeService/GetTreeMapRoot"
	RuntimeService_GetPalletTree_FullMethodName          = "/App.Runtime.RuntimeService/GetPalletTree"
	RuntimeService_ObjectsDeploy_FullMethodName          = "/App.Runtime.RuntimeService/ObjectsDeploy"
	RuntimeService_Ping_FullMethodName                   = "/App.Runtime.RuntimeService/Ping"
	RuntimeService_ObjectCommand_FullMethodName          = "/App.Runtime.RuntimeService/ObjectCommand"
	RuntimeService_RQL_FullMethodName                    = "/App.Runtime.RuntimeService/RQL"
	RuntimeService_GetObjectsValues_FullMethodName       = "/App.Runtime.RuntimeService/GetObjectsValues"
	RuntimeService_GetObjectValues_FullMethodName        = "/App.Runtime.RuntimeService/GetObjectValues"
	RuntimeService_GetPortValue_FullMethodName           = "/App.Runtime.RuntimeService/GetPortValue"
	RuntimeService_GetHost_FullMethodName                = "/App.Runtime.RuntimeService/GetHost"
	RuntimeService_AllHosts_FullMethodName               = "/App.Runtime.RuntimeService/AllHosts"
	RuntimeService_DeleteHost_FullMethodName             = "/App.Runtime.RuntimeService/DeleteHost"
	RuntimeService_EnableHost_FullMethodName             = "/App.Runtime.RuntimeService/EnableHost"
	RuntimeService_DisableHost_FullMethodName            = "/App.Runtime.RuntimeService/DisableHost"
	RuntimeService_UpdateHost_FullMethodName             = "/App.Runtime.RuntimeService/UpdateHost"
	RuntimeService_AddHost_FullMethodName                = "/App.Runtime.RuntimeService/AddHost"
	RuntimeService_SendHostMQTT_FullMethodName           = "/App.Runtime.RuntimeService/SendHostMQTT"
	RuntimeService_RegisterExtension_FullMethodName      = "/App.Runtime.RuntimeService/RegisterExtension"
	RuntimeService_AddExtension_FullMethodName           = "/App.Runtime.RuntimeService/AddExtension"
	RuntimeService_DeleteExtension_FullMethodName        = "/App.Runtime.RuntimeService/DeleteExtension"
	RuntimeService_AllExtension_FullMethodName           = "/App.Runtime.RuntimeService/AllExtension"
	RuntimeService_StartExtension_FullMethodName         = "/App.Runtime.RuntimeService/StartExtension"
	RuntimeService_StopExtension_FullMethodName          = "/App.Runtime.RuntimeService/StopExtension"
	RuntimeService_UploadZipFile_FullMethodName          = "/App.Runtime.RuntimeService/UploadZipFile"
	RuntimeService_NewTicket_FullMethodName              = "/App.Runtime.RuntimeService/NewTicket"
	RuntimeService_AllTickets_FullMethodName             = "/App.Runtime.RuntimeService/AllTickets"
	RuntimeService_AddComment_FullMethodName             = "/App.Runtime.RuntimeService/AddComment"
	RuntimeService_UpdateTicket_FullMethodName           = "/App.Runtime.RuntimeService/UpdateTicket"
	RuntimeService_DeleteTicket_FullMethodName           = "/App.Runtime.RuntimeService/DeleteTicket"
	RuntimeService_UpdateComment_FullMethodName          = "/App.Runtime.RuntimeService/UpdateComment"
	RuntimeService_DeleteComment_FullMethodName          = "/App.Runtime.RuntimeService/DeleteComment"
	RuntimeService_ExtensionStream_FullMethodName        = "/App.Runtime.RuntimeService/ExtensionStream"
)

// RuntimeServiceClient is the client API for RuntimeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RuntimeServiceClient interface {
	GetObjects(ctx context.Context, in *ObjectsRequest, opts ...grpc.CallOption) (*ObjectsResponse, error)
	GetObjectsRoot(ctx context.Context, in *ObjectsRequest, opts ...grpc.CallOption) (*ObjectsResponse, error)
	GetObjectChilds(ctx context.Context, in *ObjectRequest, opts ...grpc.CallOption) (*ObjectsResponse, error)
	// will get the childs of the parents, parents. So go up the tree two levels
	GetObjectParentsChilds(ctx context.Context, in *ObjectRequest, opts ...grpc.CallOption) (*ObjectsResponse, error)
	GetObject(ctx context.Context, in *ObjectRequest, opts ...grpc.CallOption) (*ObjectConfig, error)
	GetObjectHelp(ctx context.Context, in *ObjectID, opts ...grpc.CallOption) (*ObjectHelp, error)
	GetTreeMapRoot(ctx context.Context, in *ObjectsRequest, opts ...grpc.CallOption) (*ObjectsRootMap, error)
	GetPalletTree(ctx context.Context, in *PalletRequest, opts ...grpc.CallOption) (*PalletTree, error)
	ObjectsDeploy(ctx context.Context, in *ObjectDeploy, opts ...grpc.CallOption) (*ObjectDeploy, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	ObjectCommand(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CommandResponse, error)
	RQL(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CommandResponse, error)
	GetObjectsValues(ctx context.Context, in *ObjectsValuesRequest, opts ...grpc.CallOption) (*GetObjectValuesResponse, error)
	// all port values for an object
	GetObjectValues(ctx context.Context, in *ObjectsValueRequest, opts ...grpc.CallOption) (*GetObjectValuesResponse, error)
	// single port value for an object
	GetPortValue(ctx context.Context, in *PortRequest, opts ...grpc.CallOption) (*PortValue, error)
	GetHost(ctx context.Context, in *HostId, opts ...grpc.CallOption) (*Host, error)
	AllHosts(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HostList, error)
	DeleteHost(ctx context.Context, in *HostId, opts ...grpc.CallOption) (*Empty, error)
	EnableHost(ctx context.Context, in *HostId, opts ...grpc.CallOption) (*Empty, error)
	DisableHost(ctx context.Context, in *HostId, opts ...grpc.CallOption) (*Empty, error)
	UpdateHost(ctx context.Context, in *Host, opts ...grpc.CallOption) (*Host, error)
	AddHost(ctx context.Context, in *Host, opts ...grpc.CallOption) (*Host, error)
	SendHostMQTT(ctx context.Context, in *HostMQTT, opts ...grpc.CallOption) (*HostMQTT, error)
	RegisterExtension(ctx context.Context, in *Extension, opts ...grpc.CallOption) (*Extension, error)
	AddExtension(ctx context.Context, in *Extension, opts ...grpc.CallOption) (*Extension, error)
	DeleteExtension(ctx context.Context, in *ExtensionId, opts ...grpc.CallOption) (*Empty, error)
	AllExtension(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ExtensionList, error)
	StartExtension(ctx context.Context, in *ExtensionId, opts ...grpc.CallOption) (*Empty, error)
	StopExtension(ctx context.Context, in *ExtensionId, opts ...grpc.CallOption) (*Empty, error)
	UploadZipFile(ctx context.Context, in *UploadZipRequest, opts ...grpc.CallOption) (*UploadZipResponse, error)
	NewTicket(ctx context.Context, in *Ticket, opts ...grpc.CallOption) (*Ticket, error)
	AllTickets(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AllTicketsResponse, error)
	AddComment(ctx context.Context, in *AddCommentRequest, opts ...grpc.CallOption) (*Ticket, error)
	UpdateTicket(ctx context.Context, in *UpdateTicketRequest, opts ...grpc.CallOption) (*Ticket, error)
	DeleteTicket(ctx context.Context, in *DeleteTicketRequest, opts ...grpc.CallOption) (*Message, error)
	UpdateComment(ctx context.Context, in *UpdateCommentRequest, opts ...grpc.CallOption) (*Ticket, error)
	DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*Message, error)
	// stream messages from the server to the plugin
	ExtensionStream(ctx context.Context, opts ...grpc.CallOption) (RuntimeService_ExtensionStreamClient, error)
}

type runtimeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRuntimeServiceClient(cc grpc.ClientConnInterface) RuntimeServiceClient {
	return &runtimeServiceClient{cc}
}

func (c *runtimeServiceClient) GetObjects(ctx context.Context, in *ObjectsRequest, opts ...grpc.CallOption) (*ObjectsResponse, error) {
	out := new(ObjectsResponse)
	err := c.cc.Invoke(ctx, RuntimeService_GetObjects_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) GetObjectsRoot(ctx context.Context, in *ObjectsRequest, opts ...grpc.CallOption) (*ObjectsResponse, error) {
	out := new(ObjectsResponse)
	err := c.cc.Invoke(ctx, RuntimeService_GetObjectsRoot_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) GetObjectChilds(ctx context.Context, in *ObjectRequest, opts ...grpc.CallOption) (*ObjectsResponse, error) {
	out := new(ObjectsResponse)
	err := c.cc.Invoke(ctx, RuntimeService_GetObjectChilds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) GetObjectParentsChilds(ctx context.Context, in *ObjectRequest, opts ...grpc.CallOption) (*ObjectsResponse, error) {
	out := new(ObjectsResponse)
	err := c.cc.Invoke(ctx, RuntimeService_GetObjectParentsChilds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) GetObject(ctx context.Context, in *ObjectRequest, opts ...grpc.CallOption) (*ObjectConfig, error) {
	out := new(ObjectConfig)
	err := c.cc.Invoke(ctx, RuntimeService_GetObject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) GetObjectHelp(ctx context.Context, in *ObjectID, opts ...grpc.CallOption) (*ObjectHelp, error) {
	out := new(ObjectHelp)
	err := c.cc.Invoke(ctx, RuntimeService_GetObjectHelp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) GetTreeMapRoot(ctx context.Context, in *ObjectsRequest, opts ...grpc.CallOption) (*ObjectsRootMap, error) {
	out := new(ObjectsRootMap)
	err := c.cc.Invoke(ctx, RuntimeService_GetTreeMapRoot_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) GetPalletTree(ctx context.Context, in *PalletRequest, opts ...grpc.CallOption) (*PalletTree, error) {
	out := new(PalletTree)
	err := c.cc.Invoke(ctx, RuntimeService_GetPalletTree_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) ObjectsDeploy(ctx context.Context, in *ObjectDeploy, opts ...grpc.CallOption) (*ObjectDeploy, error) {
	out := new(ObjectDeploy)
	err := c.cc.Invoke(ctx, RuntimeService_ObjectsDeploy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, RuntimeService_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) ObjectCommand(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CommandResponse, error) {
	out := new(CommandResponse)
	err := c.cc.Invoke(ctx, RuntimeService_ObjectCommand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) RQL(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CommandResponse, error) {
	out := new(CommandResponse)
	err := c.cc.Invoke(ctx, RuntimeService_RQL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) GetObjectsValues(ctx context.Context, in *ObjectsValuesRequest, opts ...grpc.CallOption) (*GetObjectValuesResponse, error) {
	out := new(GetObjectValuesResponse)
	err := c.cc.Invoke(ctx, RuntimeService_GetObjectsValues_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) GetObjectValues(ctx context.Context, in *ObjectsValueRequest, opts ...grpc.CallOption) (*GetObjectValuesResponse, error) {
	out := new(GetObjectValuesResponse)
	err := c.cc.Invoke(ctx, RuntimeService_GetObjectValues_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) GetPortValue(ctx context.Context, in *PortRequest, opts ...grpc.CallOption) (*PortValue, error) {
	out := new(PortValue)
	err := c.cc.Invoke(ctx, RuntimeService_GetPortValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) GetHost(ctx context.Context, in *HostId, opts ...grpc.CallOption) (*Host, error) {
	out := new(Host)
	err := c.cc.Invoke(ctx, RuntimeService_GetHost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) AllHosts(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HostList, error) {
	out := new(HostList)
	err := c.cc.Invoke(ctx, RuntimeService_AllHosts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) DeleteHost(ctx context.Context, in *HostId, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, RuntimeService_DeleteHost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) EnableHost(ctx context.Context, in *HostId, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, RuntimeService_EnableHost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) DisableHost(ctx context.Context, in *HostId, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, RuntimeService_DisableHost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) UpdateHost(ctx context.Context, in *Host, opts ...grpc.CallOption) (*Host, error) {
	out := new(Host)
	err := c.cc.Invoke(ctx, RuntimeService_UpdateHost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) AddHost(ctx context.Context, in *Host, opts ...grpc.CallOption) (*Host, error) {
	out := new(Host)
	err := c.cc.Invoke(ctx, RuntimeService_AddHost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) SendHostMQTT(ctx context.Context, in *HostMQTT, opts ...grpc.CallOption) (*HostMQTT, error) {
	out := new(HostMQTT)
	err := c.cc.Invoke(ctx, RuntimeService_SendHostMQTT_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) RegisterExtension(ctx context.Context, in *Extension, opts ...grpc.CallOption) (*Extension, error) {
	out := new(Extension)
	err := c.cc.Invoke(ctx, RuntimeService_RegisterExtension_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) AddExtension(ctx context.Context, in *Extension, opts ...grpc.CallOption) (*Extension, error) {
	out := new(Extension)
	err := c.cc.Invoke(ctx, RuntimeService_AddExtension_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) DeleteExtension(ctx context.Context, in *ExtensionId, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, RuntimeService_DeleteExtension_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) AllExtension(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ExtensionList, error) {
	out := new(ExtensionList)
	err := c.cc.Invoke(ctx, RuntimeService_AllExtension_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) StartExtension(ctx context.Context, in *ExtensionId, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, RuntimeService_StartExtension_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) StopExtension(ctx context.Context, in *ExtensionId, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, RuntimeService_StopExtension_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) UploadZipFile(ctx context.Context, in *UploadZipRequest, opts ...grpc.CallOption) (*UploadZipResponse, error) {
	out := new(UploadZipResponse)
	err := c.cc.Invoke(ctx, RuntimeService_UploadZipFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) NewTicket(ctx context.Context, in *Ticket, opts ...grpc.CallOption) (*Ticket, error) {
	out := new(Ticket)
	err := c.cc.Invoke(ctx, RuntimeService_NewTicket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) AllTickets(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AllTicketsResponse, error) {
	out := new(AllTicketsResponse)
	err := c.cc.Invoke(ctx, RuntimeService_AllTickets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) AddComment(ctx context.Context, in *AddCommentRequest, opts ...grpc.CallOption) (*Ticket, error) {
	out := new(Ticket)
	err := c.cc.Invoke(ctx, RuntimeService_AddComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) UpdateTicket(ctx context.Context, in *UpdateTicketRequest, opts ...grpc.CallOption) (*Ticket, error) {
	out := new(Ticket)
	err := c.cc.Invoke(ctx, RuntimeService_UpdateTicket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) DeleteTicket(ctx context.Context, in *DeleteTicketRequest, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, RuntimeService_DeleteTicket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) UpdateComment(ctx context.Context, in *UpdateCommentRequest, opts ...grpc.CallOption) (*Ticket, error) {
	out := new(Ticket)
	err := c.cc.Invoke(ctx, RuntimeService_UpdateComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, RuntimeService_DeleteComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) ExtensionStream(ctx context.Context, opts ...grpc.CallOption) (RuntimeService_ExtensionStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &RuntimeService_ServiceDesc.Streams[0], RuntimeService_ExtensionStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &runtimeServiceExtensionStreamClient{stream}
	return x, nil
}

type RuntimeService_ExtensionStreamClient interface {
	Send(*MessageRequest) error
	Recv() (*MessageRequest, error)
	grpc.ClientStream
}

type runtimeServiceExtensionStreamClient struct {
	grpc.ClientStream
}

func (x *runtimeServiceExtensionStreamClient) Send(m *MessageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *runtimeServiceExtensionStreamClient) Recv() (*MessageRequest, error) {
	m := new(MessageRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RuntimeServiceServer is the server API for RuntimeService service.
// All implementations must embed UnimplementedRuntimeServiceServer
// for forward compatibility
type RuntimeServiceServer interface {
	GetObjects(context.Context, *ObjectsRequest) (*ObjectsResponse, error)
	GetObjectsRoot(context.Context, *ObjectsRequest) (*ObjectsResponse, error)
	GetObjectChilds(context.Context, *ObjectRequest) (*ObjectsResponse, error)
	// will get the childs of the parents, parents. So go up the tree two levels
	GetObjectParentsChilds(context.Context, *ObjectRequest) (*ObjectsResponse, error)
	GetObject(context.Context, *ObjectRequest) (*ObjectConfig, error)
	GetObjectHelp(context.Context, *ObjectID) (*ObjectHelp, error)
	GetTreeMapRoot(context.Context, *ObjectsRequest) (*ObjectsRootMap, error)
	GetPalletTree(context.Context, *PalletRequest) (*PalletTree, error)
	ObjectsDeploy(context.Context, *ObjectDeploy) (*ObjectDeploy, error)
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	ObjectCommand(context.Context, *Command) (*CommandResponse, error)
	RQL(context.Context, *Command) (*CommandResponse, error)
	GetObjectsValues(context.Context, *ObjectsValuesRequest) (*GetObjectValuesResponse, error)
	// all port values for an object
	GetObjectValues(context.Context, *ObjectsValueRequest) (*GetObjectValuesResponse, error)
	// single port value for an object
	GetPortValue(context.Context, *PortRequest) (*PortValue, error)
	GetHost(context.Context, *HostId) (*Host, error)
	AllHosts(context.Context, *Empty) (*HostList, error)
	DeleteHost(context.Context, *HostId) (*Empty, error)
	EnableHost(context.Context, *HostId) (*Empty, error)
	DisableHost(context.Context, *HostId) (*Empty, error)
	UpdateHost(context.Context, *Host) (*Host, error)
	AddHost(context.Context, *Host) (*Host, error)
	SendHostMQTT(context.Context, *HostMQTT) (*HostMQTT, error)
	RegisterExtension(context.Context, *Extension) (*Extension, error)
	AddExtension(context.Context, *Extension) (*Extension, error)
	DeleteExtension(context.Context, *ExtensionId) (*Empty, error)
	AllExtension(context.Context, *Empty) (*ExtensionList, error)
	StartExtension(context.Context, *ExtensionId) (*Empty, error)
	StopExtension(context.Context, *ExtensionId) (*Empty, error)
	UploadZipFile(context.Context, *UploadZipRequest) (*UploadZipResponse, error)
	NewTicket(context.Context, *Ticket) (*Ticket, error)
	AllTickets(context.Context, *Empty) (*AllTicketsResponse, error)
	AddComment(context.Context, *AddCommentRequest) (*Ticket, error)
	UpdateTicket(context.Context, *UpdateTicketRequest) (*Ticket, error)
	DeleteTicket(context.Context, *DeleteTicketRequest) (*Message, error)
	UpdateComment(context.Context, *UpdateCommentRequest) (*Ticket, error)
	DeleteComment(context.Context, *DeleteCommentRequest) (*Message, error)
	// stream messages from the server to the plugin
	ExtensionStream(RuntimeService_ExtensionStreamServer) error
	mustEmbedUnimplementedRuntimeServiceServer()
}

// UnimplementedRuntimeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRuntimeServiceServer struct {
}

func (UnimplementedRuntimeServiceServer) GetObjects(context.Context, *ObjectsRequest) (*ObjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjects not implemented")
}
func (UnimplementedRuntimeServiceServer) GetObjectsRoot(context.Context, *ObjectsRequest) (*ObjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectsRoot not implemented")
}
func (UnimplementedRuntimeServiceServer) GetObjectChilds(context.Context, *ObjectRequest) (*ObjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectChilds not implemented")
}
func (UnimplementedRuntimeServiceServer) GetObjectParentsChilds(context.Context, *ObjectRequest) (*ObjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectParentsChilds not implemented")
}
func (UnimplementedRuntimeServiceServer) GetObject(context.Context, *ObjectRequest) (*ObjectConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObject not implemented")
}
func (UnimplementedRuntimeServiceServer) GetObjectHelp(context.Context, *ObjectID) (*ObjectHelp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectHelp not implemented")
}
func (UnimplementedRuntimeServiceServer) GetTreeMapRoot(context.Context, *ObjectsRequest) (*ObjectsRootMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTreeMapRoot not implemented")
}
func (UnimplementedRuntimeServiceServer) GetPalletTree(context.Context, *PalletRequest) (*PalletTree, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPalletTree not implemented")
}
func (UnimplementedRuntimeServiceServer) ObjectsDeploy(context.Context, *ObjectDeploy) (*ObjectDeploy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObjectsDeploy not implemented")
}
func (UnimplementedRuntimeServiceServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedRuntimeServiceServer) ObjectCommand(context.Context, *Command) (*CommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObjectCommand not implemented")
}
func (UnimplementedRuntimeServiceServer) RQL(context.Context, *Command) (*CommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RQL not implemented")
}
func (UnimplementedRuntimeServiceServer) GetObjectsValues(context.Context, *ObjectsValuesRequest) (*GetObjectValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectsValues not implemented")
}
func (UnimplementedRuntimeServiceServer) GetObjectValues(context.Context, *ObjectsValueRequest) (*GetObjectValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectValues not implemented")
}
func (UnimplementedRuntimeServiceServer) GetPortValue(context.Context, *PortRequest) (*PortValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPortValue not implemented")
}
func (UnimplementedRuntimeServiceServer) GetHost(context.Context, *HostId) (*Host, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHost not implemented")
}
func (UnimplementedRuntimeServiceServer) AllHosts(context.Context, *Empty) (*HostList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllHosts not implemented")
}
func (UnimplementedRuntimeServiceServer) DeleteHost(context.Context, *HostId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHost not implemented")
}
func (UnimplementedRuntimeServiceServer) EnableHost(context.Context, *HostId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableHost not implemented")
}
func (UnimplementedRuntimeServiceServer) DisableHost(context.Context, *HostId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableHost not implemented")
}
func (UnimplementedRuntimeServiceServer) UpdateHost(context.Context, *Host) (*Host, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHost not implemented")
}
func (UnimplementedRuntimeServiceServer) AddHost(context.Context, *Host) (*Host, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddHost not implemented")
}
func (UnimplementedRuntimeServiceServer) SendHostMQTT(context.Context, *HostMQTT) (*HostMQTT, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendHostMQTT not implemented")
}
func (UnimplementedRuntimeServiceServer) RegisterExtension(context.Context, *Extension) (*Extension, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterExtension not implemented")
}
func (UnimplementedRuntimeServiceServer) AddExtension(context.Context, *Extension) (*Extension, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddExtension not implemented")
}
func (UnimplementedRuntimeServiceServer) DeleteExtension(context.Context, *ExtensionId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExtension not implemented")
}
func (UnimplementedRuntimeServiceServer) AllExtension(context.Context, *Empty) (*ExtensionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllExtension not implemented")
}
func (UnimplementedRuntimeServiceServer) StartExtension(context.Context, *ExtensionId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartExtension not implemented")
}
func (UnimplementedRuntimeServiceServer) StopExtension(context.Context, *ExtensionId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopExtension not implemented")
}
func (UnimplementedRuntimeServiceServer) UploadZipFile(context.Context, *UploadZipRequest) (*UploadZipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadZipFile not implemented")
}
func (UnimplementedRuntimeServiceServer) NewTicket(context.Context, *Ticket) (*Ticket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewTicket not implemented")
}
func (UnimplementedRuntimeServiceServer) AllTickets(context.Context, *Empty) (*AllTicketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllTickets not implemented")
}
func (UnimplementedRuntimeServiceServer) AddComment(context.Context, *AddCommentRequest) (*Ticket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddComment not implemented")
}
func (UnimplementedRuntimeServiceServer) UpdateTicket(context.Context, *UpdateTicketRequest) (*Ticket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTicket not implemented")
}
func (UnimplementedRuntimeServiceServer) DeleteTicket(context.Context, *DeleteTicketRequest) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTicket not implemented")
}
func (UnimplementedRuntimeServiceServer) UpdateComment(context.Context, *UpdateCommentRequest) (*Ticket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateComment not implemented")
}
func (UnimplementedRuntimeServiceServer) DeleteComment(context.Context, *DeleteCommentRequest) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}
func (UnimplementedRuntimeServiceServer) ExtensionStream(RuntimeService_ExtensionStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ExtensionStream not implemented")
}
func (UnimplementedRuntimeServiceServer) mustEmbedUnimplementedRuntimeServiceServer() {}

// UnsafeRuntimeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RuntimeServiceServer will
// result in compilation errors.
type UnsafeRuntimeServiceServer interface {
	mustEmbedUnimplementedRuntimeServiceServer()
}

func RegisterRuntimeServiceServer(s grpc.ServiceRegistrar, srv RuntimeServiceServer) {
	s.RegisterService(&RuntimeService_ServiceDesc, srv)
}

func _RuntimeService_GetObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).GetObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_GetObjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).GetObjects(ctx, req.(*ObjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_GetObjectsRoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).GetObjectsRoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_GetObjectsRoot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).GetObjectsRoot(ctx, req.(*ObjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_GetObjectChilds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).GetObjectChilds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_GetObjectChilds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).GetObjectChilds(ctx, req.(*ObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_GetObjectParentsChilds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).GetObjectParentsChilds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_GetObjectParentsChilds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).GetObjectParentsChilds(ctx, req.(*ObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_GetObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).GetObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_GetObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).GetObject(ctx, req.(*ObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_GetObjectHelp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).GetObjectHelp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_GetObjectHelp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).GetObjectHelp(ctx, req.(*ObjectID))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_GetTreeMapRoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).GetTreeMapRoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_GetTreeMapRoot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).GetTreeMapRoot(ctx, req.(*ObjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_GetPalletTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).GetPalletTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_GetPalletTree_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).GetPalletTree(ctx, req.(*PalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_ObjectsDeploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectDeploy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).ObjectsDeploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_ObjectsDeploy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).ObjectsDeploy(ctx, req.(*ObjectDeploy))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_ObjectCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).ObjectCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_ObjectCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).ObjectCommand(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_RQL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).RQL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_RQL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).RQL(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_GetObjectsValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectsValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).GetObjectsValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_GetObjectsValues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).GetObjectsValues(ctx, req.(*ObjectsValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_GetObjectValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectsValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).GetObjectValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_GetObjectValues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).GetObjectValues(ctx, req.(*ObjectsValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_GetPortValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).GetPortValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_GetPortValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).GetPortValue(ctx, req.(*PortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_GetHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).GetHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_GetHost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).GetHost(ctx, req.(*HostId))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_AllHosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).AllHosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_AllHosts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).AllHosts(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_DeleteHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).DeleteHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_DeleteHost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).DeleteHost(ctx, req.(*HostId))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_EnableHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).EnableHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_EnableHost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).EnableHost(ctx, req.(*HostId))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_DisableHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).DisableHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_DisableHost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).DisableHost(ctx, req.(*HostId))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_UpdateHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Host)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).UpdateHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_UpdateHost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).UpdateHost(ctx, req.(*Host))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_AddHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Host)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).AddHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_AddHost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).AddHost(ctx, req.(*Host))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_SendHostMQTT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostMQTT)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).SendHostMQTT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_SendHostMQTT_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).SendHostMQTT(ctx, req.(*HostMQTT))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_RegisterExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Extension)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).RegisterExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_RegisterExtension_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).RegisterExtension(ctx, req.(*Extension))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_AddExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Extension)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).AddExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_AddExtension_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).AddExtension(ctx, req.(*Extension))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_DeleteExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtensionId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).DeleteExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_DeleteExtension_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).DeleteExtension(ctx, req.(*ExtensionId))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_AllExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).AllExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_AllExtension_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).AllExtension(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_StartExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtensionId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).StartExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_StartExtension_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).StartExtension(ctx, req.(*ExtensionId))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_StopExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtensionId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).StopExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_StopExtension_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).StopExtension(ctx, req.(*ExtensionId))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_UploadZipFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadZipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).UploadZipFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_UploadZipFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).UploadZipFile(ctx, req.(*UploadZipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_NewTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ticket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).NewTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_NewTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).NewTicket(ctx, req.(*Ticket))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_AllTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).AllTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_AllTickets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).AllTickets(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_AddComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).AddComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_AddComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).AddComment(ctx, req.(*AddCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_UpdateTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).UpdateTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_UpdateTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).UpdateTicket(ctx, req.(*UpdateTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_DeleteTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).DeleteTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_DeleteTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).DeleteTicket(ctx, req.(*DeleteTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_UpdateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).UpdateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_UpdateComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).UpdateComment(ctx, req.(*UpdateCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_DeleteComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).DeleteComment(ctx, req.(*DeleteCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_ExtensionStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RuntimeServiceServer).ExtensionStream(&runtimeServiceExtensionStreamServer{stream})
}

type RuntimeService_ExtensionStreamServer interface {
	Send(*MessageRequest) error
	Recv() (*MessageRequest, error)
	grpc.ServerStream
}

type runtimeServiceExtensionStreamServer struct {
	grpc.ServerStream
}

func (x *runtimeServiceExtensionStreamServer) Send(m *MessageRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *runtimeServiceExtensionStreamServer) Recv() (*MessageRequest, error) {
	m := new(MessageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RuntimeService_ServiceDesc is the grpc.ServiceDesc for RuntimeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RuntimeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "App.Runtime.RuntimeService",
	HandlerType: (*RuntimeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetObjects",
			Handler:    _RuntimeService_GetObjects_Handler,
		},
		{
			MethodName: "GetObjectsRoot",
			Handler:    _RuntimeService_GetObjectsRoot_Handler,
		},
		{
			MethodName: "GetObjectChilds",
			Handler:    _RuntimeService_GetObjectChilds_Handler,
		},
		{
			MethodName: "GetObjectParentsChilds",
			Handler:    _RuntimeService_GetObjectParentsChilds_Handler,
		},
		{
			MethodName: "GetObject",
			Handler:    _RuntimeService_GetObject_Handler,
		},
		{
			MethodName: "GetObjectHelp",
			Handler:    _RuntimeService_GetObjectHelp_Handler,
		},
		{
			MethodName: "GetTreeMapRoot",
			Handler:    _RuntimeService_GetTreeMapRoot_Handler,
		},
		{
			MethodName: "GetPalletTree",
			Handler:    _RuntimeService_GetPalletTree_Handler,
		},
		{
			MethodName: "ObjectsDeploy",
			Handler:    _RuntimeService_ObjectsDeploy_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _RuntimeService_Ping_Handler,
		},
		{
			MethodName: "ObjectCommand",
			Handler:    _RuntimeService_ObjectCommand_Handler,
		},
		{
			MethodName: "RQL",
			Handler:    _RuntimeService_RQL_Handler,
		},
		{
			MethodName: "GetObjectsValues",
			Handler:    _RuntimeService_GetObjectsValues_Handler,
		},
		{
			MethodName: "GetObjectValues",
			Handler:    _RuntimeService_GetObjectValues_Handler,
		},
		{
			MethodName: "GetPortValue",
			Handler:    _RuntimeService_GetPortValue_Handler,
		},
		{
			MethodName: "GetHost",
			Handler:    _RuntimeService_GetHost_Handler,
		},
		{
			MethodName: "AllHosts",
			Handler:    _RuntimeService_AllHosts_Handler,
		},
		{
			MethodName: "DeleteHost",
			Handler:    _RuntimeService_DeleteHost_Handler,
		},
		{
			MethodName: "EnableHost",
			Handler:    _RuntimeService_EnableHost_Handler,
		},
		{
			MethodName: "DisableHost",
			Handler:    _RuntimeService_DisableHost_Handler,
		},
		{
			MethodName: "UpdateHost",
			Handler:    _RuntimeService_UpdateHost_Handler,
		},
		{
			MethodName: "AddHost",
			Handler:    _RuntimeService_AddHost_Handler,
		},
		{
			MethodName: "SendHostMQTT",
			Handler:    _RuntimeService_SendHostMQTT_Handler,
		},
		{
			MethodName: "RegisterExtension",
			Handler:    _RuntimeService_RegisterExtension_Handler,
		},
		{
			MethodName: "AddExtension",
			Handler:    _RuntimeService_AddExtension_Handler,
		},
		{
			MethodName: "DeleteExtension",
			Handler:    _RuntimeService_DeleteExtension_Handler,
		},
		{
			MethodName: "AllExtension",
			Handler:    _RuntimeService_AllExtension_Handler,
		},
		{
			MethodName: "StartExtension",
			Handler:    _RuntimeService_StartExtension_Handler,
		},
		{
			MethodName: "StopExtension",
			Handler:    _RuntimeService_StopExtension_Handler,
		},
		{
			MethodName: "UploadZipFile",
			Handler:    _RuntimeService_UploadZipFile_Handler,
		},
		{
			MethodName: "NewTicket",
			Handler:    _RuntimeService_NewTicket_Handler,
		},
		{
			MethodName: "AllTickets",
			Handler:    _RuntimeService_AllTickets_Handler,
		},
		{
			MethodName: "AddComment",
			Handler:    _RuntimeService_AddComment_Handler,
		},
		{
			MethodName: "UpdateTicket",
			Handler:    _RuntimeService_UpdateTicket_Handler,
		},
		{
			MethodName: "DeleteTicket",
			Handler:    _RuntimeService_DeleteTicket_Handler,
		},
		{
			MethodName: "UpdateComment",
			Handler:    _RuntimeService_UpdateComment_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _RuntimeService_DeleteComment_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ExtensionStream",
			Handler:       _RuntimeService_ExtensionStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "runtime.proto",
}
