syntax = "proto3";

option go_package = "./;runtime";

package App.Runtime;
import "google/api/annotations.proto";
import "google/protobuf/struct.proto";

service RuntimeService {

  rpc GetObjects (ObjectsRequest) returns (ObjectsResponse) {
    option (google.api.http) = {
      get: "/api/runtime"
    };
  };

  rpc GetObjectsRoot (ObjectsRequest) returns (ObjectsResponse) {
    option (google.api.http) = {
      get: "/api/runtime/root"
    };
  };

  rpc GetObjectSettingsSchema (Request) returns (ObjectSettings) {
    option (google.api.http) = {
      get: "/api/runtime/objects/settings/schema/{uuid}"
    };
  };

  rpc GetObjectSettings (Request) returns (ObjectSettings) {
    option (google.api.http) = {
      get: "/api/runtime/objects/settings/{uuid}"
    };
  };


  rpc ObjectRest (Request) returns (Message) {
    option (google.api.http) = {
      post: "/api/runtime/objects/reset/{uuid}"
      body: "*"
    };
  };

  rpc UpdateObjectTransformations (ObjectTransformations) returns (Message) {
    option (google.api.http) = {
      post: "/api/runtime/objects/transformations/{uuid}"
      body: "*"
    };
  };

  rpc UpdateObjectSettings (ObjectSettings) returns (ObjectSettings) {
    option (google.api.http) = {
      post: "/api/runtime/objects/settings/{uuid}"
      body: "*"
    };
  };


  rpc GetObjectChilds (ObjectRequest) returns (ObjectsResponse) {
    option (google.api.http) = {
      get: "/api/runtime/childs/{uuid}"
    };
  };

  // will get the childs of the parents, parents. So go up the tree two levels
  rpc GetObjectParentsChilds (ObjectRequest) returns (ObjectsResponse) {
    option (google.api.http) = {
      get: "/api/runtime/grandparent/childs/{uuid}"
    };
  };

  rpc GetObject (ObjectRequest) returns (ObjectConfig) {
    option (google.api.http) = {
      get: "/api/runtime/objects/{uuid}"
    };
  };

  rpc GetObjectHelp (ObjectID) returns (ObjectHelp) {
    option (google.api.http) = {
      get: "/api/runtime/objects/help/{id}"
    };
  }


  rpc GetTreeMapRoot (ObjectsRequest) returns (ObjectsRootMap) {
    option (google.api.http) = {
      get: "/api/runtime/tree"
    };
  };

  rpc GetPalletTree (PalletRequest) returns (PalletTree) {
    option (google.api.http) = {
      get: "/api/plugins/pallet"
    };
  };

  rpc SingleObjectsDeploy (ObjectConfig) returns (ObjectConfig) {
    option (google.api.http) = {
      post: "/api/runtime/objects/update"
      body: "*"
    };
  };


  rpc ObjectsDeploy (ObjectDeploy) returns (ObjectDeploy) {
    option (google.api.http) = {
      post: "/api/runtime"
      body: "*"
    };
  };

  rpc Ping (PingRequest) returns (PingResponse) {
    option (google.api.http) = {
      get: "/api/ping"
    };
  };


  rpc ObjectCommand (Command) returns (CommandResponse) {
    option (google.api.http) = {
      post: "/api/command"
      body: "*"
    };
  };

  rpc RQL (Command) returns (CommandResponse) {
    option (google.api.http) = {
      post: "/api/rql"
      body: "*"
    };
  };



  rpc GetObjectsValues (ObjectsValuesRequest) returns (GetObjectValuesResponse) {
    option (google.api.http) = {
      get: "/api/runtime/objects/values"
    };
  };

  // all port values for an object
  rpc GetObjectValues (ObjectsValueRequest) returns (GetObjectValuesResponse) {
    option (google.api.http) = {
      get: "/api/runtime/objects/values/{uuid}"
    };
  };

  // single port value for an object
  rpc GetPortValue (PortRequest) returns (PortValue) {
    option (google.api.http) = {
      get: "/api/runtime/objects/{objectUUID}/port/{portID}"
    };
  };

  // Extensions
  rpc RegisterPlugin (Plugin) returns (Plugin) {
    option (google.api.http) = {
      post: "/api/plugins/register"
      body: "*"
    };
  }

  rpc AddPlugin (Plugin) returns (Plugin) {
    option (google.api.http) = {
      post: "/api/plugins/add"
      body: "*"
    };
  }

  rpc DeletePlugin (PluginId) returns (Empty) {
    option (google.api.http) = {
      delete: "/api/plugins/delete/{uuid}"
    };
  }

  rpc AllPlugin (Empty) returns (PluginList) {
    option (google.api.http) = {
      get: "/api/plugins"
    };
  }

  rpc StartPlugin (PluginId) returns (Empty) {
    option (google.api.http) = {
      post: "/api/plugins/start/{uuid}"
    };
  }

  rpc StopPlugin (PluginId) returns (Empty) {
    option (google.api.http) = {
      post: "/api/plugins/stop/{uuid}"
    };
  }

  rpc UploadZipFile (UploadZipRequest) returns (UploadZipResponse) {
    option (google.api.http) = {
      post: "/api/runtime/upload"
      body: "*"
    };
  }

  // Hosts
  rpc GetHost (Request) returns (Host) {
    option (google.api.http) = {
      get: "/api/hosts/{uuid}"
    };
  }

  rpc GetHosts (Empty) returns (HostsResponse) {
    option (google.api.http) = {
      get: "/api/hosts"
    };
  }

  rpc CreateHost (Host) returns (Host) {
    option (google.api.http) = {
      post: "/api/hosts"
      body: "*"
    };
  }

  rpc UpdateHost (Host) returns (Host) {
    option (google.api.http) = {
      patch: "/api/hosts/{uuid}"
      body: "*"
    };
  }

  rpc DeleteHost (Request) returns (Message) {
    option (google.api.http) = {
      delete: "/api/hosts/{uuid}"
    };
  }

  rpc EnableHost (Request) returns (Empty) {
    option (google.api.http) = {
      post: "/api/hosts/{uuid}/enable"
    };
  }

  rpc DisableHost (Request) returns (Empty) {
    option (google.api.http) = {
      post: "/api/hosts/{uuid}/disable"
    };
  }

  rpc SendHostMQTT (HostMQTT) returns (HostMQTT) {
    option (google.api.http) = {
      post: "/api/hosts/mqtt"
      body: "*"
    };
  }


  // Tickets
  rpc GetTicket (RequestWithChildren) returns (Ticket) {
    option (google.api.http) = {
      get: "/api/tickets/{uuid}"
    };
  }


  rpc GetTickets (RequestWithChildren) returns (TicketsResponse) {
    option (google.api.http) = {
      get: "/api/tickets"
    };
  }

  rpc CreateTicket (Ticket) returns (Ticket) {
    option (google.api.http) = {
      post: "/api/tickets"
      body: "*"
    };
  }

  rpc UpdateTicket (Ticket) returns (Ticket) {
    option (google.api.http) = {
      patch: "/api/tickets/{uuid}"
      body: "*"
    };
  }

  rpc DeleteTicket (Request) returns (Message) {
    option (google.api.http) = {
      delete: "/api/tickets/{uuid}"
    };
  }

  rpc UpdateTicketUsers (TicketUsersRequest) returns (TicketUsersResponse) {
    option (google.api.http) = {
      put: "/api/tickets/{uuid}/users"
      body: "*"
    };
  }


  // Ticket Comments
  rpc CreateTicketComment (TicketComment) returns (TicketComment) {
    option (google.api.http) = {
      post: "/api/tickets/comments"
      body: "*"
    };
  }

  rpc UpdateTicketComment (TicketComment) returns (TicketComment) {
    option (google.api.http) = {
      patch: "/api/tickets/comments/{uuid}"
      body: "*"
    };
  }

  rpc DeleteTicketComment (Request) returns (Message) {
    option (google.api.http) = {
      delete: "/api/tickets/comments/{uuid}"
    };
  }

  // Teams
  rpc GetTeam (RequestWithChildren) returns (Team) {
    option (google.api.http) = {
      get: "/api/teams/{uuid}"
    };
  }

  rpc GetTeams (RequestWithChildren) returns (TeamsResponse) {
    option (google.api.http) = {
      get: "/api/teams"
    };
  }

  rpc CreateTeam (Team) returns (Team) {
    option (google.api.http) = {
      post: "/api/teams"
      body: "*"
    };
  }

  rpc UpdateTeam (Team) returns (Team) {
    option (google.api.http) = {
      patch: "/api/teams/{uuid}"
      body: "*"
    };
  }

  rpc DeleteTeam (Request) returns (Message) {
    option (google.api.http) = {
      delete: "/api/teams/{uuid}"
    };
  }

  rpc UpdateTeamRoles (TeamRolesRequest) returns (TeamRolesResponse) {
    option (google.api.http) = {
      put: "/api/teams/{uuid}/roles"
      body: "*"
    };
  }


  // Users
  rpc GetUser (RequestWithChildren) returns (User) {
    option (google.api.http) = {
      get: "/api/users/{uuid}"
    };
  }

  rpc GetUsers (RequestWithChildren) returns (UsersResponse) {
    option (google.api.http) = {
      get: "/api/users"
    };
  }

  rpc CreateUser (User) returns (User) {
    option (google.api.http) = {
      post: "/api/users"
      body: "*"
    };
  }

  rpc UpdateUser (User) returns (User) {
    option (google.api.http) = {
      patch: "/api/users/{uuid}"
      body: "*"
    };
  }

  rpc DeleteUser (Request) returns (Message) {
    option (google.api.http) = {
      delete: "/api/users/{uuid}"
    };
  }

  rpc UpdateUserTickets (UserTicketsRequest) returns (UserTicketsResponse) {
    option (google.api.http) = {
      put: "/api/users/{uuid}/tickets"
      body: "*"
    };
  }

  // Roles
  rpc GetRole (RequestWithChildren) returns (Role) {
    option (google.api.http) = {
      get: "/api/roles/{uuid}"
    };
  }

  rpc GetRoles (RequestWithChildren) returns (RolesResponse) {
    option (google.api.http) = {
      get: "/api/roles"
    };
  }

  rpc CreateRole (Role) returns (Role) {
    option (google.api.http) = {
      post: "/api/roles"
      body: "*"
    };
  }

  rpc UpdateRole (Role) returns (Role) {
    option (google.api.http) = {
      patch: "/api/roles/{uuid}"
      body: "*"
    };
  }

  rpc DeleteRole (Request) returns (Message) {
    option (google.api.http) = {
      delete: "/api/roles/{uuid}"
    };
  }

  rpc UpdateRolePermissions (PermissionsRequest) returns (PermissionsResponse) {
    option (google.api.http) = {
      put: "/api/roles/{uuid}/permissions"
      body: "*"
    };
  }

  // stream messages from the server to the plugin
  rpc PluginStream(stream MessageRequest) returns (stream MessageRequest);
}

message Request {
  string uuid = 1;
}

message RequestWithChildren {
  string uuid = 1;           // Path parameter
  bool with_children = 2;    // Query parameter
}

message HostMQTT {
  string hostUUID = 1;
  string topic = 2;
  string messageUUID = 3;
  bytes body = 4;
}

message Message {
  string message = 1;
}

message MessageRequest {
  string extensionUUID = 1;
  string key = 2;
  ObjectConfig object = 3;
  repeated ObjectConfig pallet = 4;
  bytes body = 5;
  Command command = 6;
  string stringPayload = 7;
  string objectUUID = 8;
}

message GetObjectValuesResponse {
  repeated  PortValue values = 1;
}

message ObjectsValuesRequest {
  bool asBytes = 2;
}

message ObjectsValueRequest {
  string uuid = 1;
  bool asBytes = 2;
}

message PortRequest {
  string objectUUID = 1;
  string portID = 2;
}

message PortValue {
  string objectUUID = 1;
  string portID = 2;
  string dataType = 3;
  bool isNil = 4;
  bool transformationApplied = 5;
  bytes data = 6;
  optional double floatValue = 7;
  optional string stringValue = 8;
  optional bool boolValue = 9;
  optional int32 intValue = 10;
  optional string jsonValue = 12;
  optional string displayValue = 13;
  repeated string portIDs = 14;
}


message ValueTransformation {
  string unit = 1;
  bytes rawData = 2;
}


message ObjectsRequest {
  bool withData = 1;
}

message PalletRequest {
}


message PalletTree {
  map<string, Plugins> plugins = 1;
}

message Plugins {
  map<string, NestedObjectConfigMap> drivers = 1;
  map<string, NestedObjectConfigMap> rubixNetwork = 2;
  map<string, NestedObjectConfigMap> logic = 3;
  map<string, NestedObjectConfigMap> services = 4;
}

message NestedObjectConfigMap {
  map<string, ObjectConfig> entries = 1;
}

message Command {
  string targetGlobalID = 1;
  string senderGlobalID = 2;
  string targetObjectUUID = 3;
  string senderObjectUUID = 4;
  string transactionUUID = 5;
  string key = 6;
  string query = 7;
  repeated string args = 8;
  map<string, string> data = 9;
  bytes body = 10;
  ObjectConfig object = 11;
  repeated PortValue portValues = 12;
}


message ObjectPagination {
  int32 count = 1;
  int32 pageNumber = 2;
  int32 pageSize = 3;
  int32 totalPages = 4;
  int32 totalCount = 5;
  repeated PortValue PortValues = 6;

}


message CommandResponse {
  string senderID = 1;
  int32 count = 2;
  double typeFloat = 3;
  int32 typeInt = 4;
  bool typeBool = 5;
  string typeString = 7;
  string typeJson = 8;
  bytes typeByte = 9;
  string typeError = 6;
  string returnType = 10;
  map<string, string> mapStrings = 11;
  repeated CommandResponse response = 12;
  repeated ObjectConfig serializeObjects = 13;
  ObjectPagination objectPagination = 14;
  PalletTree pallet = 15;
  ObjectsRootMap objectTree = 16;
  AncestorObjectTree ancestorObjectTree = 17;
  repeated PortValue PortValues = 18;
}


// New message for the Ping request
message PingRequest {
}


// New message for the Ping response
message PingResponse {
  string message = 1;
}


message ObjectDeploy {
  repeated string deleted = 1;
  repeated ObjectConfig new = 2;
  repeated ObjectConfig updated = 3;
}


message Empty {}

message ObjectsResponse {
  repeated ObjectConfig objects = 1;
}

message ObjectHelp {
  string help = 1;
}

message ObjectID {
  string id = 1;
}

message ObjectSettings {
  string uuid = 1;
  string value = 2;
  bool persist = 4;
}

message ObjectTransformations {
  string uuid = 1;
  string portID = 2;
  bool applyTransformation = 3;
  bool persist = 4;
  google.protobuf.Struct transformation = 5;
}

message ObjectRequest {
  string uuid = 1;
  bool withPoints = 2;
}

message ObjectConfig {
  string id = 1;
  Info info = 2;
  repeated Port inputs = 3;
  repeated Port outputs = 4;
  Meta meta = 5;
  ObjectStats stats = 6;
  repeated Connection connections = 7;
  ObjectSettings settings = 8;
  repeated PortValue portValues = 9;
}


message Info {
  string objectID = 1;
  string objectType = 2;
  string category = 3;
  string pluginName = 4;
  string workingGroup = 5;
  string workingGroupLeader = 6;
  string workingGroupParent = 7;
  string icon = 8;
  repeated string workingGroupObjects = 9;
  repeated string workingGroupChildObjects = 10;
  repeated string tags = 11;
  map<string, string> metaTags = 12;
  map<string, string> flags = 13;
  Permissions permissions = 14;
  Requirements requirements = 15;
  bool isVirtualObject = 16;
  string help = 17;
  bool supportDynamicInputs = 18;
  int32 dynamicInputsMaxLimit = 19;

}


message Permissions {
  bool allPermissions = 1;
  bool canBeCreated = 2;
  bool canBeDeleted = 3;
  bool canBeUpdated = 4;
  bool readOnly = 5;
  bool allowHotFix = 6;
  bool forceDelete = 7;
}

message Requirements {
  bool callResetOnDeploy = 1;
  bool allowRuntimeAccess = 2;
  bool maxOne = 3;
  bool mustLiveInObjectType = 4;
  bool mustLiveParent = 5;
  bool requiresLogger = 6;
  bool supportsActions = 7;
  repeated string servicesRequirements = 8;
  repeated string loggerOptions = 9;
}


message ObjectStats {
  string status = 1;
  string loaded = 2;
  uint32 loopCount = 3;
  string timeSince = 6;
}


message Port {
  string id = 1;
  string name = 2;
  string portUUID = 3;
  string direction = 4;
  string dataType = 5;
  int32 defaultPosition = 6;
  google.protobuf.Struct transformation = 7;
  bool enablePersistence = 8;
  int32 PersistenceCount = 9;
}


message Meta {
  string objectUUID = 1;
  string objectName = 2;
  string parentUUID = 3;
  Position position = 4;
  int32 dynamicInputsCount = 5;
}

message Position {
  int32 positionY = 1;
  int32 positionX = 2;
}


message Connection {
  string connectionUUID = 1;;
  string targetConnectionUUID = 2;
  string sourceUUID = 3;
  string sourcePort = 4;
  string sourcePortUUID = 5;
  string targetUUID = 6;
  string targetPort = 7;
  string targetPortUUID = 8;
  bool isExistingConnection = 9;
  string flowDirection = 10;
  bool disable = 11;
  bool isError = 12;
  string created = 13;
  string lastOk = 14;
  string lastFail = 15;
  int32 failCount = 16;
  repeated string error = 17;
  string wiresheetUUID = 18;
}


message ObjectExtractedDetails {
  string id = 1;
  string name = 2;
  string uuid = 3;
  string parentUUID = 4;
  string category = 5;
  string objectType = 6;
  bool isParent = 7;
  repeated ObjectExtractedDetails children = 8;
}

message ObjectsRootMap {
  string rubixNetworkName = 1;
  string rubixNetworkDesc = 2;
  repeated ObjectExtractedDetails rubixNetwork = 3;
  string driversName = 4;
  string driversDesc = 5;
  repeated ObjectExtractedDetails drivers = 6;
  string servicesName = 7;
  string servicesDesc = 8;
  repeated ObjectExtractedDetails services = 9;
  string logicName = 10;
  string logicDesc = 11;
  repeated ObjectExtractedDetails logic = 12;
}


message AncestorObjectTree {
  string uuid = 1;
  string name = 2;
  string id = 3;
  string parentUUID = 4;
  string category = 5;
  repeated AncestorObjectTree children = 6;
}

message Plugin {
  string uuid = 1;
  string name = 2;
  string pid = 3;
  string status = 4;
  string fileName = 5;
  int32 port = 7;
  repeated ObjectConfig pallet = 8;
  int32 objectsCount = 9;
}

message PluginId {
  string uuid = 1;
}

message PluginList {
  repeated Plugin extensions = 1;
}

message UploadZipRequest {
  bytes zipFile = 1;
  string destinationDir = 2;
}

message UploadZipResponse {
  string message = 1;
}

// Host
message Host {
  string uuid = 1;
  string name = 2;
  string type = 3;
  string displayName = 4;
  string description = 5;
  bool enable = 6;
  string ip = 7;
  int32 port = 8;
  bool https = 9;
  string externalToken = 10;
  string imageName = 11;
  string displayColour = 12;
  bool star = 13;
  string folderName = 14;
  string lon = 15;
  string lat = 16;
}

message HostsResponse {
  repeated Host hosts = 1;
}

message CommonUUID {
  string uuid = 1;
}

// Ticket
message Ticket {
  string uuid = 1;
  string title = 2;
  string description = 3;
  string priority = 4;
  string status = 5;
  string raisedByUserUUID = 6;
  string createdAt = 7;
  string updatedAt = 8;

  repeated User assignedUsers = 9;
  repeated TicketComment comments = 10;
}

message TicketsResponse {
  repeated Ticket tickets = 1;
}

message TicketUsersRequest {
  string uuid = 1;
  repeated string uuids = 2;
}

message TicketUsersResponse {
  repeated string uuids = 2;
}

// TicketComment
message TicketComment {
  string uuid = 1;
  string ticketUUID = 2;
  string comment = 3;
  string raisedByUserUUID = 4;

  string createdAt = 5;
  string updatedAt = 6;
}

// Team
message Team {
  string uuid = 1;
  string name = 2;
  repeated Role roles = 3; // Each team can have multiple roles
}

message TeamsResponse {
  repeated Team teams = 1;
}

message TeamRolesRequest {
  string uuid = 1;
  repeated string uuids = 2;
}

message TeamRolesResponse {
  repeated string uuids = 2;
}

// User
message User {
  string uuid = 1;
  string username = 2;
  string password = 3;
  bool isAdmin = 4;
  string teamUUID = 5;
  repeated Ticket assignedTickets = 6;

}

message UsersResponse {
  repeated User users = 1;
}

message UserTicketsRequest {
  string uuid = 1;
  repeated string uuids = 2;
}

message UserTicketsResponse {
  repeated string uuids = 2;
}

// Role
message Role {
  string uuid = 1;
  string name = 2;
  repeated Permission permissions = 3; // List of permissions like "C", "R", "U", "D"
}

message RolesResponse {
  repeated Role roles = 1;
}

// Permission
message Permission {
  string permission = 2;
}

message PermissionsRequest {
  string uuid = 1 ;
  repeated Permission permissions = 2;
}

message PermissionsResponse {
  repeated Permission permissions = 2;
}
